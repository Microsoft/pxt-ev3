{
  "ButtonEvent": "User interaction on buttons",
  "Draw": "Drawing modes",
  "Image.buffer": "Returns the underlaying Buffer object.",
  "Image.doubled": "Double size of an image.",
  "Image.draw": "Draw an image on the screen.",
  "Image.height": "Returns the height of an image.",
  "Image.width": "Returns the width of an image.",
  "LightsPattern": "Patterns for lights under the buttons.",
  "MMap.getNumber": "Read a number in specified format from the buffer.",
  "MMap.ioctl": "Perform ioctl(2) on the underlaying file",
  "MMap.length": "Returns the length of a Buffer object.",
  "MMap.read": "Perform read(2) on the underlaying file",
  "MMap.setNumber": "Write a number in specified format in the buffer.",
  "MMap.slice": "Read a range of bytes into a buffer.",
  "MMap.write": "Perform write(2) on the underlaying file",
  "brick.Button": "Generic button class, for device buttons and sensors.",
  "brick.Button.isPressed": "Check if button is currently pressed or not.",
  "brick.Button.onEvent": "Do something when a button or sensor is clicked, up or down.",
  "brick.Button.onEvent|param|body": "code to run when the event is raised",
  "brick.Button.pauseUntil": "Waits until the event is raised",
  "brick.Button.pauseUntil|param|ev": "the event to wait for",
  "brick.Button.wasPressed": "See if the button was pressed again since the last time you checked.",
  "brick._imagePicker": "An image",
  "brick._imagePicker|param|image": "the image",
  "brick.buttonDown": "Down button on the EV3 Brick.",
  "brick.buttonEnter": "Enter button on the EV3 Brick.",
  "brick.buttonLeft": "Left button on the EV3 Brick.",
  "brick.buttonRight": "Right button on the EV3 Brick.",
  "brick.buttonUp": "Up button on the EV3 Brick.",
  "brick.clearScreen": "Clears the screen",
  "brick.lightPattern": "Pattern block.",
  "brick.lightPattern|param|pattern": "the lights pattern to use. eg: LightsPattern.Green",
  "brick.print": "Show text on the screen.",
  "brick.print|param|text": "the text to print on the screen, eg: \"Hello world\"",
  "brick.print|param|x": "the starting position's x coordinate, eg: 0",
  "brick.print|param|y": "the starting position's x coordinate, eg: 0",
  "brick.setPixel": "Sets a pixel on or off",
  "brick.setPixel|param|on": "a value indicating if the pixel should be on or off",
  "brick.setPixel|param|x": "the starting position's x coordinate, eg: 0",
  "brick.setPixel|param|y": "the starting position's x coordinate, eg: 0",
  "brick.setStatusLight": "Set lights.",
  "brick.setStatusLight|param|pattern": "the lights pattern to use.",
  "brick.showImage": "Shows an image on screen",
  "brick.showImage|param|image": "image to draw",
  "console": "Reading and writing data to the console output.\r\n\r\nReading and writing data to the console output.",
  "console.addListener": "Adds a listener for the log messages",
  "console.log": "Write a line of text to the console output.",
  "console.logValue": "Write a name:value pair as a line of text to the console output.",
  "console.logValue|param|name": "name of the value stream, eg: \"x\"",
  "console.logValue|param|value": "to write",
  "console.sendToScreen": "Sends the log messages to the brick screen and uses the brick up and down buttons to scroll.",
  "control": "Program controls and events.",
  "control.allocateNotifyEvent": "Allocates the next user notification event",
  "control.deviceFirmwareVersion": "Determine the version of system software currently running.",
  "control.dmesg": "Write data to DMESG debugging buffer.",
  "control.mmap": "Create new file mapping in memory",
  "control.raiseEvent": "Announce that an event happened to registered handlers.",
  "control.raiseEvent|param|src": "ID of the Component that generated the event",
  "control.raiseEvent|param|value": "Component specific code indicating the cause of the event.",
  "motors.Motor.isReady": "Returns a value indicating if the motor is still running a previous command.",
  "motors.Motor.move": "Moves the motor by a number of rotations, degress or seconds",
  "motors.Motor.move|param|speed": "the speed from ``100`` full forward to ``-100`` full backward, eg: 50",
  "motors.Motor.move|param|unit": "the meaning of the value",
  "motors.Motor.move|param|value": "the move quantity, eg: 2",
  "motors.Motor.pauseUntilReady": "Pauses the execution until the previous command finished.",
  "motors.Motor.pauseUntilReady|param|timeOut": "optional maximum pausing time in milliseconds",
  "motors.Motor.reset": "Resets the motor(s).",
  "motors.Motor.setBrake": "Sets the automatic brake on or off when the motor is off",
  "motors.Motor.setBrake|param|brake": "a value indicating if the motor should break when off",
  "motors.Motor.setReversed": "Reverses the motor polarity",
  "motors.Motor.setSpeed": "Sets the speed of the motor.",
  "motors.Motor.setSpeed|param|speed": "the speed from ``100`` full forward to ``-100`` full backward, eg: 50",
  "motors.Motor.stop": "Stops the motor(s).",
  "motors.SingleMotor.angle": "Gets motor ration angle.",
  "motors.SingleMotor.clearCount": "Clears the motor count",
  "motors.SingleMotor.speed": "Gets motor actual speed.",
  "motors.SynchedMotorPair.steer": "Turns the motor and the follower motor by a number of rotations",
  "motors.SynchedMotorPair.steer|param|speed": "the speed from ``100`` full forward to ``-100`` full backward, eg: 50",
  "motors.SynchedMotorPair.steer|param|steering": "the ratio of power sent to the follower motor, from ``-100`` to ``100``",
  "motors.SynchedMotorPair.steer|param|unit": "the meaning of the value",
  "motors.SynchedMotorPair.steer|param|value": "the move quantity, eg: 2",
  "motors.SynchedMotorPair.tank": "The Move Tank block can make a robot drive forward, backward, turn, or stop. \nUse the Move Tank block for robot vehicles that have two Large Motors, \nwith one motor driving the left side of the vehicle and the other the right side. \nYou can make the two motors go at different speeds or in different directions \nto make your robot turn.",
  "motors.SynchedMotorPair.tank|param|speedRight": "the speed on the right motor, eg: 50",
  "motors.SynchedMotorPair.tank|param|unit": "@param speedLeft the speed on the left motor, eg: 50",
  "motors.SynchedMotorPair.tank|param|value": "the amount of movement, eg: 2",
  "motors.stopAllMotors": "Stops all motors",
  "output.createBuffer": "Create a new zero-initialized buffer.",
  "output.createBuffer|param|size": "number of bytes in the buffer",
  "screen.clear": "Clear screen and reset font to normal.",
  "screen.imageOf": "Makes an image bound to a buffer.",
  "screen.unpackPNG": "Decompresses a 1-bit gray scale PNG image to image format.",
  "serial": "Reading and writing data over a serial connection.",
  "serial.writeDmesg": "Send DMESG debug buffer over serial."
}